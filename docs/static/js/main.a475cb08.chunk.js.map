{"version":3,"sources":["API.js","get_creds_button.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","responseType","GetCredsButton","props","state","generated","paymentPointer","username","authToken","ilpOverHttpUrl","assetCode","assetScale","this","body","onClick","createAccountRequest","accountId","receiveRoutes","sendRoutes","API","post","then","response","data","newIlpOverHttpUrl","customSettings","console","log","setState","React","Component","Table","style","width","map","row","TableRow","val","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,iCACTC,aAAc,S,OCDGC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAW,EACXC,eAAgB,GAChBC,SAAU,GACVC,UAAW,GACXC,eAAgB,uBAChBC,UAAW,MACXC,WAAY,GATD,E,0CAanB,WAAU,IAAD,OACL,GAAIC,KAAKR,MAAMC,UAAW,CACtB,IAAIQ,EACA,CACI,CAAC,WAAYD,KAAKR,MAAMG,UACxB,CAAC,sBAAuBK,KAAKR,MAAMI,WACnC,CAAC,kBAAmBI,KAAKR,MAAME,gBAC/B,CAAC,oBAAqBM,KAAKR,MAAMK,gBACjC,CAAC,aAAcG,KAAKR,MAAMM,WAC1B,CAAC,cAAeE,KAAKR,MAAMO,aAEnC,OACI,gCACI,cAAC,EAAD,CAAOE,KAAMA,IADjB,OAOR,OACI,wBAAQC,QAAS,WACb,IAAMC,EAAuB,CACzBC,UAAW,KACXN,UAAW,EAAKN,MAAMM,UACtBC,WAAY,EAAKP,MAAMO,WACvBM,eAAe,EACfC,YAAY,GAEhB,OAAOC,EAAIC,KAAK,yCAA0CL,GACrDM,MAAK,SAAAC,GACF,IAAMC,EAAOD,EAASC,KAChBC,EAAoB,EAAKpB,MAAMK,eAAiB,aAAec,EAAKP,UAAY,OAEhFR,EAAYe,EAAKE,eAAe,0CACtCC,QAAQC,IAAIL,GAEZ,EAAKM,SAAS,CACVvB,WAAW,EACXE,SAAUgB,EAAKP,UACfP,eAAgBe,EAChBhB,UAAWA,EACXF,eAAgB,iBAAmBiB,EAAKP,UACxCN,UAAWa,EAAKb,UAChBC,WAAYY,EAAKZ,iBAvBjC,kD,GAlCgCkB,IAAMC,WAoE5CC,E,4JACF,WACI,IAAIlB,EAAOD,KAAKT,MAAMU,KACtB,OACI,uBAAOmB,MAAO,CAACC,MAAO,KAAtB,SACI,gCACCpB,EAAKqB,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAAUA,IAAKA,e,GAN5BN,IAAMC,WAapBM,E,4JACF,WACI,IAAID,EAAMvB,KAAKT,MAAMgC,IACrB,OACI,6BACKA,EAAID,KAAI,SAAAG,GAAG,OAAI,6BAAKA,a,GALdR,IAAMC,WCpEdQ,MAXf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,cAAC,EAAD,SCGDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a475cb08.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"https://jc.ilpv4.dev/accounts/\",\n    responseType: \"json\"\n});","import React from \"react\";\nimport API from \"./API\";\n\nexport default class GetCredsButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            generated: false,\n            paymentPointer: \"\",\n            username: \"\",\n            authToken: \"\",\n            ilpOverHttpUrl: \"https://jc.ilpv4.dev\",\n            assetCode: \"XRP\",\n            assetScale: 9\n        };\n    }\n\n    render() {\n        if (this.state.generated) {\n            var body =\n                [\n                    ['Username', this.state.username],\n                    ['Authorization Token', this.state.authToken],\n                    ['Payment Pointer', this.state.paymentPointer],\n                    ['ILP-over-HTTP URL', this.state.ilpOverHttpUrl],\n                    ['Asset Code', this.state.assetCode],\n                    ['Asset Scale', this.state.assetScale]\n                ];\n            return (\n                <div>\n                    <Table body={body}/>,\n                </div>\n            );\n        }\n\n        // Display a \"Like\" <button>\n        return (\n            <button onClick={() => {\n                const createAccountRequest = {\n                    accountId: null,\n                    assetCode: this.state.assetCode,\n                    assetScale: this.state.assetScale,\n                    receiveRoutes: false,\n                    sendRoutes: false\n                };\n                return API.post('https://hermes-rest.ilpv4.dev/accounts', createAccountRequest)\n                    .then(response => {\n                        const data = response.data;\n                        const newIlpOverHttpUrl = this.state.ilpOverHttpUrl + '/accounts/' + data.accountId + '/ilp';\n\n                        const authToken = data.customSettings[\"ilpOverHttp.incoming.simple.auth_token\"];\n                        console.log(response);\n\n                        this.setState({\n                            generated: true,\n                            username: data.accountId,\n                            ilpOverHttpUrl: newIlpOverHttpUrl,\n                            authToken: authToken,\n                            paymentPointer: \"$jc.ilpv4.dev/\" + data.accountId,\n                            assetCode: data.assetCode,\n                            assetScale: data.assetScale\n                        });\n                    });\n                // return this.setState({generated: true})\n            }}>\n                Generate ILP Testnet Credentials\n            </button>\n        );\n    }\n}\n\nclass Table extends React.Component {\n    render() {\n        var body = this.props.body;\n        return (\n            <table style={{width: 500}}>\n                <tbody>\n                {body.map(row => <TableRow row={row}/>)}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nclass TableRow extends React.Component {\n    render() {\n        var row = this.props.row;\n        return (\n            <tr>\n                {row.map(val => <td>{val}</td>)}\n            </tr>\n        )\n    }\n}\n\n// const domContainer = document.querySelector('#get_creds_button_container');\n// ReactDOM.render(e(GetCredsButton), domContainer);","// import logo from './logo.svg';\nimport './App.css';\n\nimport GetCredsButton from \"./get_creds_button\"\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <GetCredsButton></GetCredsButton>\n            </header>\n        </div>\n    );\n}\n// const domContainer = document.querySelector('#get_creds_button_container');\n// ReactDOM.render(e(GetCredsButton), domContainer);\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}