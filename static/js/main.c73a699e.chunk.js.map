{"version":3,"sources":["components/UI/Spinner.tsx","components/UI/Button.tsx","helpers/fieldsToDisplay.ts","components/UI/TableRow.tsx","components/UI/Table.tsx","pages/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Spinner","type","color","height","width","timeout","Button","props","className","classNames","onClick","children","createFieldsToDisplay","response","id","field","value","accountId","customSettings","assetCode","assetScale","toString","TableRow","borderDotted","Table","rows","map","row","Main","content","useState","isLoading","setIsLoading","dataToDisplay","setDataToDisplay","loadDataHandler","a","body","receiveRoutes","sendRoutes","fetch","method","headers","JSON","stringify","rawResponse","json","data","console","error","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAeeA,EAZC,WACd,OACE,cAAC,IAAD,CACEC,KAAK,WACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,O,gBCUAC,EAfA,SAACC,GACd,OACE,wBACEC,UAAWC,IACT,yIACAF,EAAMC,WAERP,KAAMM,EAAMN,MAAQ,SACpBS,QAASH,EAAMG,QANjB,SAQGH,EAAMI,YCAAC,EAAwB,SAACC,GACpC,IAAIC,EAAK,EAkCT,MAjC8B,CAC5B,CACEA,GAAIA,IACJC,MAAO,WACPC,MAAOH,EAASI,WAElB,CACEH,GAAIA,IACJC,MAAO,iBACPC,MAAM,iCAAD,OAAmCH,EAASI,UAA5C,SAEP,CACEH,GAAIA,IACJC,MAAO,YACPC,MAAOH,EAASK,eAAe,2CAEjC,CACEJ,GAAIA,IACJC,MAAO,iBACPC,MAAM,iBAAD,OAAmBH,EAASI,YAEnC,CACEH,GAAIA,IACJC,MAAO,YACPC,MAAOH,EAASM,WAElB,CACEL,GAAIA,IACJC,MAAO,aACPC,MAAOH,EAASO,WAAWC,cCpBlBC,EAhBE,SAACf,GAChB,IAAMgB,EAA4B,IAAbhB,EAAMO,GAAW,gBAAkB,cACxD,OACE,qBACEN,UAAWC,IACT,0CACAc,GAHJ,UAME,oBAAIf,UAAU,OAAd,SAAsBD,EAAMO,KAC5B,6BAAKP,EAAMQ,QACX,oBAAIP,UAAU,OAAd,SAAsBD,EAAMS,YCcnBQ,EA1BD,SAACjB,GACb,OACE,qBAAKC,UAAU,eAAf,SACE,wBAAOA,UAAU,cAAjB,UACE,gCACE,qBAAIA,UAAU,wDAAd,UACE,oBAAIA,UAAU,aAAd,eACA,oBAAIA,UAAU,QAAd,sBACA,oBAAIA,UAAU,aAAd,wBAGJ,gCACGD,EAAMkB,KAAKC,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAEEb,GAAIa,EAAIb,GACRC,MAAOY,EAAIZ,MACXC,MAAOW,EAAIX,OAHNW,EAAIZ,kBC4CRa,EA1DF,WACX,IAmCIC,EAnCJ,EAAkCC,oBAAkB,GAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,mBAA0B,IAApE,mBAAOG,EAAP,KAAsBC,EAAtB,KAEMC,EAAe,uCAAG,kCAAAC,EAAA,6DACtBJ,GAAa,GACPK,EAAO,CACXpB,UAAW,KACXE,UAAW,MACXC,WAAY,EACZkB,eAAe,EACfC,YAAY,GAPQ,kBAUMC,MACxB,yCACA,CACEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BL,KAAMM,KAAKC,UAAUP,KAfL,cAUdQ,EAVc,gBAmBuBA,EAAYC,OAnBnC,OAmBdjB,EAnBc,OAqBdkB,EAAOnC,EAAsBiB,GAEnCK,EAAiBa,GACjBf,GAAa,GAxBO,kDA2BpBgB,QAAQC,MAAR,MACAjB,GAAa,GA5BO,0DAAH,qDAuCrB,OANID,EACFF,EAAU,cAAC,EAAD,IACDI,EAAciB,OAAS,IAChCrB,EAAU,cAAC,EAAD,CAAOJ,KAAMQ,KAIvB,qBAAKzB,UAAU,sBAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,qBAAKA,UAAU,iBAAf,kCACA,qBAAKA,UAAU,eAAf,yEAGA,cAAC,EAAD,CAAQE,QAASyB,EAAiB3B,UAAU,cAA5C,8CAGCqB,QClDMsB,MARf,WACE,OACE,qBAAK3C,UAAU,wEAAf,SACE,cAAC,EAAD,OCOS4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c73a699e.chunk.js","sourcesContent":["import React from 'react'\nimport Loader from 'react-loader-spinner'\n\nconst Spinner = () => {\n  return (\n    <Loader\n      type=\"TailSpin\"\n      color=\"#2563EB\"\n      height={100}\n      width={100}\n      timeout={3000} //3 secs\n    />\n  )\n}\n\nexport default Spinner\n","import React, { ButtonHTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {}\n\nconst Button = (props: ButtonProps) => {\n  return (\n    <button\n      className={classNames(\n        'px-4 py-4 bg-blue-600 border-blue-600 border-2 text-white font-bold text-lg hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600',\n        props.className\n      )}\n      type={props.type || 'button'}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  )\n}\n\nexport default Button\n","import DataToDisplay from '../models/dataToDisplay'\nimport InterledgerResponse from '../models/interledgerResponse'\n\nexport const FIELDS_TO_KEEP: string[] = [\n  'username',\n  'customSettings',\n  'accountId',\n  'assetCode',\n  'assetScale'\n]\n\nconst isKeyNeeded = (key: string) => {\n  return FIELDS_TO_KEEP.includes(key)\n}\n\nexport const createFieldsToDisplay = (response: InterledgerResponse) => {\n  let id = 1\n  const data: DataToDisplay[] = [\n    {\n      id: id++,\n      field: 'username',\n      value: response.accountId\n    },\n    {\n      id: id++,\n      field: 'ilpOverHttpUrl',\n      value: `https://jc.ilpv4.dev/accounts/${response.accountId}/ilp`\n    },\n    {\n      id: id++,\n      field: 'authToken',\n      value: response.customSettings['ilpOverHttp.incoming.simple.auth_token']\n    },\n    {\n      id: id++,\n      field: 'paymentPointer',\n      value: `$jc.ilpv4.dev/${response.accountId}`\n    },\n    {\n      id: id++,\n      field: 'assetCode',\n      value: response.assetCode\n    },\n    {\n      id: id++,\n      field: 'assetScale',\n      value: response.assetScale.toString()\n    }\n  ]\n\n  return data\n}\n\nexport default isKeyNeeded\n","import React from 'react'\n\nimport classNames from 'classnames'\n\ninterface TableRowProps {\n  id: number\n  field: string\n  value: string\n}\n\nconst TableRow = (props: TableRowProps) => {\n  const borderDotted = props.id !== 1 ? 'border-dotted' : 'border-none'\n  return (\n    <tr\n      className={classNames(\n        'text-lg h-10 border-t-2 border-blue-200',\n        borderDotted\n      )}\n    >\n      <td className=\"pl-2\">{props.id}</td>\n      <td>{props.field}</td>\n      <td className=\"pr-2\">{props.value}</td>\n    </tr>\n  )\n}\n\nexport default TableRow\n","import React from 'react'\n\nimport DataToDisplay from '../../models/dataToDisplay'\nimport TableRow from './TableRow'\n\ninterface TableProps {\n  rows: DataToDisplay[]\n}\n\nconst Table = (props: TableProps) => {\n  return (\n    <div className=\"w-full mx-20\">\n      <table className=\"table-fixed\">\n        <thead>\n          <tr className=\"bg-blue-600 text-2xl text-left text-white border-none\">\n            <th className=\"w-1/5 pl-2\">#</th>\n            <th className=\"w-2/5\">Property</th>\n            <th className=\"w-2/5 pr-2\">Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.rows.map((row) => (\n            <TableRow\n              key={row.field}\n              id={row.id}\n              field={row.field}\n              value={row.value}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Table\n","import React, { useState } from 'react'\n\nimport Spinner from '../components/UI/Spinner'\nimport InterledgerResponse from '../models/interledgerResponse'\nimport Button from '../components/UI/Button'\nimport DataToDisplay from '../models/dataToDisplay'\nimport { createFieldsToDisplay } from '../helpers/fieldsToDisplay'\nimport Table from '../components/UI/Table'\n\nconst Main = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [dataToDisplay, setDataToDisplay] = useState<DataToDisplay[]>([])\n\n  const loadDataHandler = async () => {\n    setIsLoading(true)\n    const body = {\n      accountId: null,\n      assetCode: 'XRP',\n      assetScale: 9,\n      receiveRoutes: false,\n      sendRoutes: false\n    }\n    try {\n      const rawResponse = await fetch(\n        'https://hermes-rest.ilpv4.dev/accounts',\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(body)\n        }\n      )\n\n      const content: InterledgerResponse = await rawResponse.json()\n      // Creates the object with the fields we want to display\n      const data = createFieldsToDisplay(content)\n\n      setDataToDisplay(data)\n      setIsLoading(false)\n    } catch (error) {\n      // TODO: to improve the error handling\n      console.error(error)\n      setIsLoading(false)\n    }\n  }\n\n  let content: any\n  if (isLoading) {\n    content = <Spinner />\n  } else if (dataToDisplay.length > 0) {\n    content = <Table rows={dataToDisplay} />\n  }\n\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"flex flex-col items-center\">\n        <div className=\"text-3xl mt-10\">ILPv4 Testnet Faucet</div>\n        <div className=\"text-xl mt-5\">\n          Generate a new account on the ilpv4.dev Interledger Testnet\n        </div>\n        <Button onClick={loadDataHandler} className=\"mt-10 mb-16\">\n          Generate ILP TestNet Credentials\n        </Button>\n        {content}\n      </div>\n    </div>\n  )\n}\nexport default Main\n","import React from 'react'\n\nimport Main from './pages/main'\n\nfunction App() {\n  return (\n    <div className=\"h-screen w-full font-interledger bg-white flex flex-col justify-start\">\n      <Main />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style/main.css'\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\n\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}